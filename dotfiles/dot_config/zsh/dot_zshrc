# Misc
bindkey -e
bindkey "^[[3~" delete-char
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
setopt no_beep

# Export
export LANG=ja_JP.utf8
export CLICOLOR=1
export EDITOR=nvim

# Alias
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias dir='dir --color=auto'
  alias vdir='vdir --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias sz="source $ZDOTDIR/.zshrc"
alias cc='fzf-cd'
alias gs='fzf-git-checkout'
alias g='git'
alias lg='lazygit'
alias n='npm'
alias p='pnpm'
alias nr='npm run'
alias ch='chezmoi'
alias amp='amplify'
alias tf='terraform'
alias dk='docker'
alias dkc='docker compose'
alias hex2dec="printf '%d\n'"
alias dec2hex="printf '%x\n'"
if [ -v WSL_DISTRO_NAME ]; then
  alias yank='/mnt/c/scoop/shims/win32yank.exe -i'
  alias explorer='/mnt/c/Windows/explorer.exe'
fi


# Application specific settings
# Homebrew
if type "brew" > /dev/null 2>&1; then
  fpath=(
    $HOMEBREW_PREFIX/share/zsh/site-functions
    $fpath
  )
fi
# asdf
if [ -e "$HOMEBREW_PREFIX/opt/asdf/libexec/asdf.sh" ]; then
  source $HOMEBREW_PREFIX/opt/asdf/libexec/asdf.sh
  fpath=(
    $(brew --prefix asdf)/etc/bash_completion.d
    $fpath
  )
fi

# Completion
fpath=(
  $ZDOTDIR/completions
  $fpath
)
autoload -Uz compinit && compinit
# ignore case
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# ========================== zsh-hooks ==========================
precmd() {
  # 前回のコマンドの終了コードを記録
  export PREVIOUS_EXIT_CODE=$?

  # git の状態を環境変数に記録
  save-git-status-to-env

  # Promptの更新
  PROMPT=`prompt-format`
}

# ========================== functions ==========================
# Prompt
prompt-format() {
  local reset='%{\e[0m%}' # reset

  local result='
%F{yellow}'
  if [ $PWD = $HOME ]; then
    local home_symbol='\uf015'
    result+="${home_symbol} "
  else
    local folder_symbol='\uf07c'
    result+="${folder_symbol}  %~"
  fi
  result+='%f '

  # git管理されているかどうか
  if [ $IS_GIT_DIR -ne 0 ]; then
    if [ -n "$CUR_BRANCH_NAME" ]; then
      local branch_symbol="\ufb2b"
      local output="${branch_symbol} ${CUR_BRANCH_NAME}"
    else
      local detached_symbol="\uf417"
      local output="${detached_symbol} ${CUR_COMMIT_HASH}"
    fi
    result+="on %F{magenta}${output}${GIT_STATUS}%f "
  fi

  # 前回の終了コードが0の場合
  if [ $PREVIOUS_EXIT_CODE -eq 0 ]; then
    local color="${reset}"
  else
    local color="%F{red}"
  fi
  result+="[${color}${PREVIOUS_EXIT_CODE}${reset}]\n$ "

  echo $result
}

# git の状態を環境変数に記録
save-git-status-to-env() {
  # git管理されていないかどうか
  git status --porcelain >/dev/null 2>&1
  if [ $? -ne 0 ];then
    export IS_GIT_DIR=0
    export CUR_BRANCH_NAME=""
    export CUR_COMMIT_HASH=""
    export GIT_STATUS=""
  else
    export IS_GIT_DIR=1
    export CUR_BRANCH_NAME=$(git branch --show-current 2>/dev/null)
    export CUR_COMMIT_HASH=$(git rev-parse --short HEAD 2>/dev/null)
    if [ -n "$(git status --short 2>/dev/null)" ]; then
      export GIT_STATUS="*"
    else
      export GIT_STATUS=""
    fi
  fi
}


# fzf-command-history
fzf-command-history() {
  BUFFER=$(history -n -r 1 | awk '!a[$0]++{print}' | grep -v "ll" | grep -v "cd" | fzf --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle reset-prompt
}
zle -N fzf-command-history
bindkey '^r' fzf-command-history

# fzf-cd - cd to selected directory
fzf-cd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fzf-git-checkout
fzf-git-checkout() {
  local_brs=$(git branch | sort -r | sed -e 's/^ *//')
  local_brs_trim=$(git branch | sed -e 's/\*//' | sed -e 's/ //g')
  remote_brs=$(git branch -r | grep -v HEAD | sed -e 's/^.* //g')
  remote_brs_trim=$(echo $remote_brs | sed -e 's/^.*\///')
  local_remote_brs=$(echo $local_brs_trim\\n$remote_brs_trim | sort | uniq -D)
  remote_only_brs=$(echo $local_remote_brs\\n$remote_brs_trim | sort | uniq -u)
  target_brs=$(echo $local_brs\\n$remote_brs\\n$remote_only_brs)

  target_br=$(
    echo $target_brs |
      fzf --preview-window="right,65%" --prompt="CHECKOUT BRANCH > " --preview="echo {} | tr -d ' *' | xargs git lg --color=always" |
      sed -e 's/* //'
  )
  if [ -n "$target_br" ]; then
    git checkout $target_br
  fi
}

# 規定の設定値の .prettierrc を作成する
init-prettier() {
  cat << EOF > .prettierrc.json
{
  "semi": false,
  "trailingComma": "none"
}
EOF
}
