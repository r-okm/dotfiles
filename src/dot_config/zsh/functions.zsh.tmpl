prompt_format_1() {
  local reset='%{\e[0m%}'

  {{ if eq .chezmoi.os "linux" }}
  local usericon="\uf17c"
  {{ else if eq .chezmoi.os "windows" }}
  local usericon="\uf17a"
  {{ else }}
  local usericon="\uf007"
  {{ end }}
  local user="%F{blue}${usericon} ${USER}%f"

  local diricon
  if [ $PWD = $HOME ]; then
    diricon="\uf015"
  else
    diricon="\ue5fe"
  fi
  local dir=" ${reset}in %F{yellow}${diricon} %~%f"

  local gitbranch
  local branch=$(git --no-optional-locks symbolic-ref --short HEAD 2>/dev/null)
  if [ -n "${branch}" ]; then
    gitbranch=" ${reset}on %F{magenta}\ue725 ${branch}%f"
  else
    local commit=$(git branch --contains 2>/dev/null)
    if [ -n "${commit}" ]; then
      local remotebranch=$(echo $commit | grep '*' | sed -e 's/* (HEAD detached at //' | sed -e 's/)//')
      gitbranch=" ${reset}on %F{magenta}\uf417 ${remotebranch}%f"
    fi
  fi

  local awsprofile
  if [ -n "${AWS_PROFILE}" ]; then
    awsprofile=" ${reset}- %F{red}\uf270 ${AWS_PROFILE}%f"
  fi

  local previouscode
  if [ $PREVIOUS_EXIT_CODE -eq 0 ]; then
    previouscode=" ${reset}[${PREVIOUS_EXIT_CODE}]"
  else
    previouscode=" ${reset}[%F{red}${PREVIOUS_EXIT_CODE}%f]"
  fi

  echo "
${user}${dir}${gitbranch}${awsprofile}${previouscode}\n%# "
}

prompt_format_2() {
  local reset='%{\e[0m%}'
  local -a options

  local branch=$(git --no-optional-locks symbolic-ref --short HEAD 2>/dev/null) && \
    local commit=$(git rev-parse --short HEAD 2>/dev/null)
  local git=''
  if [ -n "${branch}" ]; then
    git="($branch) "
  elif [ -n "${commit}" ]; then
    git="($commit) "
  fi

  echo "
%F{yellow}%3/%f${reset} ${git}%# "
}

fzf_command_history() {
  BUFFER=$(history -n -r 1 | awk '!a[$0]++{print}' | grep -v "ls" | grep -v "cd" | fzf --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle reset-prompt
}

fzf_cd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  if [ -n "$dir" ]; then
    cd "$dir"
    echo "cd $dir"
  fi
}

fzf_git_branch() {
  local_brs=$(git branch | sort -r | sed -e 's/^ *//') && \
  local_brs_trim=$(git branch | sed -e 's/\*//' | sed -e 's/ //g') && \
  remote_brs=$(git branch -r | grep -v HEAD | sed -e 's/^.* //g') && \

  remote_brs_trim=$(echo $remote_brs | sed -e 's/^.*\///')
  local_remote_brs=$(echo $local_brs_trim\\n$remote_brs_trim | sort | uniq -D)
  remote_only_brs=$(echo $local_remote_brs\\n$remote_brs_trim | sort | uniq -u)
  target_brs=$(echo $local_brs\\n$remote_brs\\n$remote_only_brs)

  get_branch_name="echo {} | tr -d ' *'"
  delete_branch="$get_branch_name | xargs git branch -D"
  checkout_branch="$get_branch_name | xargs git checkout"

  echo $target_brs |
  fzf --ansi --no-sort --reverse --tiebreak=index \
    --height 50% \
    --prompt='CHECKOUT BRANCH > '  \
    --header='ENTER to checkout, CTRL-d to delete' \
    --preview-window='right,65%' \
    --preview="$get_branch_name | xargs -I % sh -c 'git lg %'" \
    --bind "enter:become:$checkout_branch" \
    --bind "ctrl-d:become:$delete_branch"
}

fzf_git_log() {
  local log_line_to_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xargs -I % sh -c 'echo -n %'"
  local preview_commit="$log_line_to_hash | xargs -I % sh -c 'git show % | delta --features=fzf_git_log'"
  local show_commit="$log_line_to_hash | xargs -I % sh -c 'git show % | delta --features=git --paging=always'"
  local checkout_commit="$log_line_to_hash | xargs -I % sh -c 'git switch -d %'"
  local copy_commit_hash="$log_line_to_hash | $YANK_COMMAND"

  git lga | \
    fzf --ansi --no-sort --reverse --tiebreak=index \
      --preview=$preview_commit \
      --header='ENTER to view, CTRL-x to checkout, CTRL-y to copy hash, q to exit' \
      --bind='j:down,k:up,d:half-page-down,u:half-page-up,q:abort' \
      --bind "enter:execute:$show_commit" \
      --bind "ctrl-x:become:$checkout_commit" \
      --bind "ctrl-y:execute-silent:$copy_commit_hash"
}

awsp() {
  local profile=$(
    aws configure list-profiles |
    fzf --ansi --no-sort --reverse --tiebreak=index \
      --height 20% \
      --prompt='SWITCH AWS PROFILE > '
  )

  if [ ! -z "$profile" ]; then
    export AWS_PROFILE="$profile"
    echo "export AWS_PROFILE=\"$profile\""
  else
    unset AWS_PROFILE
    echo "unset AWS_PROFILE"
  fi
}

custom_code() {
  if [[ $PWD == /mnt/* ]]; then
    # /mnt 配下のディレクトリをホスト側の vscode で開く
    $CMD_COMMAND /c "code $@"
  else
    command code "$@"
  fi
}

custom_nvim() {
  # セッションファイルが存在する場合は、セッションファイルを読み込んで nvim を起動する
  if [ -f $NEOVIM_SESSION_FILE_NAME ]; then
    nvim -S $NEOVIM_SESSION_FILE_NAME
  else
    nvim
  fi
}

# zsh-abbr, fast-syntax-highlighting
chroma_single_word() {
  (( next_word = 2 | 8192 ))

  local __first_call="$1" __wrd="$2" __start_pos="$3" __end_pos="$4"
  local __style

  (( __first_call )) && { __style=${FAST_THEME_NAME}alias }
  [[ -n "$__style" ]] && (( __start=__start_pos-${#PREBUFFER}, __end=__end_pos-${#PREBUFFER}, __start >= 0 )) && reply+=("$__start $__end ${FAST_HIGHLIGHT_STYLES[$__style]}")

  (( this_word = next_word ))
  _start_pos=$_end_pos

  return 0
}

register_single_word_chroma() {
  local word=$1
  if [[ -x $(command -v $word) ]] || [[ -n $FAST_HIGHLIGHT["chroma-$word"] ]]; then
    return 1
  fi

  FAST_HIGHLIGHT+=( "chroma-$word" chroma_single_word )
  return 0
}

function _windows_terminal_osc_9_9 {
  # Inform Terminal about shell current working directory
  # see: https://github.com/microsoft/terminal/issues/8166
  {{ if eq .chezmoi.os "linux" }}
  {{   if (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
    printf '\e]9;9;%s\e\' "$(wslpath -w "$(pwd)")"
  {{   end}}
  {{ else if eq .chezmoi.os "windows" }}
    printf '\e]9;9;%s\e\' "$(cygpath --windows "$(pwd)")"
  {{ end }}
}

windows_terminal_tab_title() {
  echo -ne '\033]0;'"$1"'\a'
}

# local-ssl-proxy
local_ssl_proxy() {
  local source=${1:-8081}
  local target=${2:-8080}

  npx local-ssl-proxy --key ~/pem/localhost-key.pem --cert ~/pem/localhost.pem --source $source --target $target
}
